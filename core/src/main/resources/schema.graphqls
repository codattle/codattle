scalar RatingValue

enum Language {
    PL
    EN
}

type User {
    id: ID!
    username: String!
}

type Rating {
    id: ID!
    author: User!
    game: Game!
    value: RatingValue!
    description: String
}

type TranslatedText {
    language: Language!
    content: String!
}

type Sprite {
    name: String!
    image: File!
}

type Game {
    id: ID!
    name: String!
    description: [TranslatedText!]!
    code: String!
    logo: File
    sprites: [Sprite!]!
    ratings: [Rating!]!
    scripts(authorId: ID): [Script!]!
    allowedPlayerCounts: [Int!]!
    maxAllowedPlayerCount: Int!
}

type Script {
    id: ID!
    code: String!
}

type ResultFrame {
    order: Int!
    content: String!
}

type Result {
    winner: Int
    resultFrames: [ResultFrame!]!
}

type Match {
    id: ID!
    name: String!
    scripts: [Script!]!
    scriptsCount: Int!
    result: Result
    game: Game!
}

type File {
    id: ID!
    name: String!
    owner: User!
    contentType: String!
}

type Tournament {
    id: ID!
    name: String!
    game: Game!
    scripts: [Script!]!
    currentScriptCount: Int!
    maxScriptCount: Int!
    matches: [Match!]!
}

input NewGame {
    name: String!
    description: String!
    code: String!
    logo: ID
    sprites: [NewSprite!]
    allowedPlayerCounts: [Int!]!
}

input NewResultFrame {
    order: Int!
    content: String!
}

input NewSprite {
    name: String!
    image: ID!
}

type Query {
    game(gameId: ID!): Game!

    games: [Game!]!

    searchGames(name: String): [Game!]!

    match(matchId: ID!): Match!

    matches(gameId: ID!): [Match!]!

    script(scriptId: ID!): Script!

    scripts(gameId: ID, authorId: ID): [Script!]!

    tournament(tournamentId: ID!): Tournament!

    tournaments(gameId: ID!): [Tournament!]!
}

type Mutation {
    createGame(game: NewGame): Game!

    addSpriteToGame(gameId: ID!, sprite: NewSprite!): Boolean!

    removeSpriteFromGame(gameId: ID!, spriteName: String!): Boolean!

    rateGame(gameId: ID!, rating: RatingValue!, description: String): Rating!

    createMatch(name: String!, gameId: ID!): Match!

    createInstantMatch(gameId: ID!, scripts: [ID!]!): Match!

    sendScript(gameId: ID!, code: String!): Script!

    updateScriptCode(scriptId: ID!, code: String!): Boolean!

    joinMatch(matchId: ID!, scriptId: ID!): Boolean!

    provideResultFrames(matchId: ID!, resultFrames: [NewResultFrame!]!): Boolean!

    provideMatchWinner(matchId: ID!, winner: Int!): Boolean!

    createTournament(name: String!, gameId: ID!, maxScriptCount: Int!): Tournament!

    joinTournament(tournamentId: ID!, scriptId: ID!): Boolean!
}

