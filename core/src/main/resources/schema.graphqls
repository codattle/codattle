type Game {
    id: ID!
    name: String!
    description: String!
    code: String!
}

type Script {
    id: ID!
    code: String!
}

type ResultFrame {
    order: Int!
    content: String!
}

type Result {
    winner: Int
    resultFrames: [ResultFrame!]!
}

type Match {
    id: ID!
    name: String!
    scripts: [Script!]!
    result: Result
}

type MatchWithGame {
    id: ID!
    name: String!
    scripts: [Script!]!
    result: Result
    game: Game!
}

input NewResultFrame {
    order: Int!
    content: String!
}

type Query {
    games: [Game!]!

    match(matchId: ID!): MatchWithGame!

    matches(gameId: ID!): [Match!]!

    scripts: [Script!]!
}

type Mutation {
    createGame(name: String!, description: String!, code: String!): Game!

    createMatch(name: String!, gameId: ID!): Match!

    sendScript(gameId: ID!, code: String!): Script!

    joinMatch(matchId: ID!, scriptId: ID!): Boolean!

    provideResultFrames(matchId: ID!, resultFrames: [NewResultFrame!]!): Boolean!

    provideMatchWinner(matchId: ID!, winner: Int!): Boolean!
}

