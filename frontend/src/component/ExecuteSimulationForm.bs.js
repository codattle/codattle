// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Repromise = require("@aantron/repromise/src/js/repromise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var GraphqlService$ReactTemplate = require("../service/GraphqlService.bs.js");

var component = ReasonReact.reducerComponent("ExecuteSimulationForm");

var ppx_printed_query = "mutation ($name: String!)  {\nexecuteSimulation(name: $name)  {\nid  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "executeSimulation");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "id");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$1 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$1);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Simulation is missing");
        }
        tmp = {
          id: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field executeSimulation on type Mutation is missing");
    }
    return {
            executeSimulation: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(name, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "name",
                  name
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "name",
                  name
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var ExecuteSimulationQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

function executeSimulation(name) {
  return GraphqlService$ReactTemplate.executeQuery(make(name, /* () */0));
}

function make$1(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var state = param[/* state */1];
              if (state) {
                var send = param[/* send */3];
                return React.createElement(React.Fragment, undefined, React.createElement("input", {
                                value: state[0],
                                onChange: (function ($$event) {
                                    return Curry._1(send, /* SetName */[$$event.target.value]);
                                  })
                              }), React.createElement("button", {
                                onClick: (function (_event) {
                                    return Curry._1(send, /* Send */0);
                                  })
                              }, "Send"));
              } else {
                return React.createElement("span", undefined, "Sending...");
              }
            }),
          /* initialState */(function (param) {
              return /* Editing */[""];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                return /* Update */Block.__(0, [/* Editing */[action[0]]]);
              } else if (state) {
                var name = state[0];
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* Sending */0,
                          (function (param) {
                              var send = param[/* send */3];
                              return Repromise.wait((function (_result) {
                                            return Curry._1(send, /* SetName */[""]);
                                          }), executeSimulation(name));
                            })
                        ]);
              } else {
                return /* NoUpdate */0;
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.ExecuteSimulationQuery = ExecuteSimulationQuery;
exports.executeSimulation = executeSimulation;
exports.make = make$1;
/* component Not a pure module */
