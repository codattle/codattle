// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Repromise = require("@aantron/repromise/src/js/repromise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var GraphqlService$ReactTemplate = require("../service/GraphqlService.bs.js");

var component = ReasonReact.reducerComponent("GameSelector");

var ppx_printed_query = "query   {\ngames  {\nid  \nname  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "games");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Game is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "name");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Game is missing");
                  }
                  return {
                          id: tmp,
                          name: tmp$1
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field games on type Query is missing");
    }
    return {
            games: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetGamesQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

function getGames(param) {
  return GraphqlService$ReactTemplate.executeQuery(make(/* () */0));
}

function make$1(onSelect, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (param) {
              return Curry._1(param[/* send */3], /* LoadGames */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var tmp;
              if (typeof state === "number") {
                switch (state) {
                  case 0 : 
                      tmp = React.createElement(React.Fragment, undefined);
                      break;
                  case 1 : 
                      tmp = React.createElement("span", undefined, "Loading...");
                      break;
                  case 2 : 
                      tmp = React.createElement("span", undefined, "Error");
                      break;
                  
                }
              } else {
                var games = state[0];
                var gameList = List.length(games) === 0 ? React.createElement("span", undefined, "No games") : React.createElement("ul", undefined, $$Array.of_list(List.map((function (game) {
                                  return React.createElement("li", {
                                              key: game[/* id */0],
                                              onClick: (function (_event) {
                                                  var gameId = game[/* id */0];
                                                  if (onSelect !== undefined) {
                                                    return Curry._1(onSelect, gameId);
                                                  } else {
                                                    return /* () */0;
                                                  }
                                                })
                                            }, game[/* name */1]);
                                }), games)));
                tmp = React.createElement(React.Fragment, undefined, React.createElement("button", {
                          onClick: (function (_event) {
                              return Curry._1(send, /* LoadGames */0);
                            })
                        }, "Refresh"), gameList);
              }
              return React.createElement("div", undefined, tmp);
            }),
          /* initialState */(function (param) {
              return /* NotLoaded */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* Error */2]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* Loading */1,
                            (function (param) {
                                var send = param[/* send */3];
                                return Repromise.wait((function (result) {
                                              if (result !== undefined) {
                                                var games = List.map((function (game) {
                                                        return /* record */[
                                                                /* id */game.id,
                                                                /* name */game.name
                                                              ];
                                                      }), $$Array.to_list(Caml_option.valFromOption(result).games));
                                                return Curry._1(send, /* SetGames */[games]);
                                              } else {
                                                return Curry._1(send, /* SetError */1);
                                              }
                                            }), GraphqlService$ReactTemplate.executeQuery(make(/* () */0)));
                              })
                          ]);
                }
              } else {
                return /* Update */Block.__(0, [/* Loaded */[action[0]]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.GetGamesQuery = GetGamesQuery;
exports.getGames = getGames;
exports.make = make$1;
/* component Not a pure module */
