// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Repromise = require("@aantron/repromise/src/js/repromise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$ReactTemplate = require("../util/Utils.bs.js");
var GraphqlService$ReactTemplate = require("../service/GraphqlService.bs.js");

var component = ReasonReact.reducerComponentWithRetainedProps("MatchSelector");

var ppx_printed_query = "query ($gameId: ID!)  {\nmatches(gameId: $gameId)  {\nid  \nname  \nscripts  {\nid  \n}\n\nresult  {\nwinner  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "matches");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Match is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "name");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Match is missing");
                  }
                  var match$5 = Js_dict.get(value$1, "scripts");
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$5);
                    var match$6 = Js_json.decodeArray(value$4);
                    tmp$2 = match$6 !== undefined ? match$6.map((function (value) {
                              var match = Js_json.decodeObject(value);
                              if (match !== undefined) {
                                var match$1 = Js_dict.get(Caml_option.valFromOption(match), "id");
                                var tmp;
                                if (match$1 !== undefined) {
                                  var value$1 = Caml_option.valFromOption(match$1);
                                  var match$2 = Js_json.decodeString(value$1);
                                  tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
                                } else {
                                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type Script is missing");
                                }
                                return {
                                        id: tmp
                                      };
                              } else {
                                return Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                            })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$4));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field scripts on type Match is missing");
                  }
                  var match$7 = Js_dict.get(value$1, "result");
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$7);
                    var match$8 = Js_json.decodeNull(value$5);
                    if (match$8 !== undefined) {
                      tmp$3 = undefined;
                    } else {
                      var match$9 = Js_json.decodeObject(value$5);
                      var tmp$4;
                      if (match$9 !== undefined) {
                        var match$10 = Js_dict.get(Caml_option.valFromOption(match$9), "winner");
                        var tmp$5;
                        if (match$10 !== undefined) {
                          var value$6 = Caml_option.valFromOption(match$10);
                          var match$11 = Js_json.decodeNull(value$6);
                          if (match$11 !== undefined) {
                            tmp$5 = undefined;
                          } else {
                            var match$12 = Js_json.decodeNumber(value$6);
                            tmp$5 = match$12 !== undefined ? match$12 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$6));
                          }
                        } else {
                          tmp$5 = undefined;
                        }
                        tmp$4 = {
                          winner: tmp$5
                        };
                      } else {
                        tmp$4 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                      }
                      tmp$3 = Caml_option.some(tmp$4);
                    }
                  } else {
                    tmp$3 = undefined;
                  }
                  return {
                          id: tmp,
                          name: tmp$1,
                          scripts: tmp$2,
                          result: tmp$3
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field matches on type Query is missing");
    }
    return {
            matches: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(gameId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "gameId",
                  gameId
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var gameId = variables.gameId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "gameId",
                  gameId
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetMatchesQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var ppx_printed_query$1 = "mutation ($name: String!, $gameId: ID!)  {\ncreateMatch(name: $name, gameId: $gameId)  {\nid  \n}\n\n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "createMatch");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "id");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$1 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$1);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Match is missing");
        }
        tmp = {
          id: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field createMatch on type Mutation is missing");
    }
    return {
            createMatch: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(name, gameId, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "gameId",
                  gameId
                ]
              ]),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var name = variables.name;
  var gameId = variables.gameId;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "gameId",
                  gameId
                ]
              ]),
          parse: parse$1
        };
}

function ret_type$1(f) {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var CreateMatchMutation = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

function getMatches(gameId) {
  return GraphqlService$ReactTemplate.executeQuery(make(gameId, /* () */0));
}

function make$2(gameId, onSelect, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (param) {
              if (param[/* retainedProps */2][/* gameId */0] !== gameId) {
                Curry._1(param[/* send */3], /* LoadMatches */Block.__(0, [gameId]));
              }
              return param[/* state */1];
            }),
          /* didMount */(function (param) {
              return Curry._1(param[/* send */3], /* LoadMatches */Block.__(0, [gameId]));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var getMatchDescription = function (match_) {
                return match_[/* name */1] + (" (" + (String(match_[/* scriptsCount */2]) + ("/2)" + Belt_Option.mapWithDefault(match_[/* winner */3], "", (function (winner) {
                                    return " Winner: Player " + String(winner + 1 | 0);
                                  })))));
              };
              var tmp;
              if (typeof state === "number") {
                switch (state) {
                  case 0 : 
                      tmp = React.createElement(React.Fragment, undefined);
                      break;
                  case 1 : 
                      tmp = React.createElement("span", undefined, "Loading...");
                      break;
                  case 2 : 
                      tmp = React.createElement("span", undefined, "Error");
                      break;
                  
                }
              } else {
                var matches = state[1];
                var newMatchName = state[0];
                var matchList = List.length(matches) === 0 ? React.createElement("span", undefined, "No matches") : React.createElement("ul", undefined, Utils$ReactTemplate.componentList((function (match_) {
                              return React.createElement("li", {
                                          key: match_[/* id */0],
                                          onClick: (function (_event) {
                                              var matchId = match_[/* id */0];
                                              if (onSelect !== undefined) {
                                                return Curry._1(onSelect, matchId);
                                              } else {
                                                return /* () */0;
                                              }
                                            })
                                        }, getMatchDescription(match_));
                            }), matches));
                tmp = React.createElement(React.Fragment, undefined, React.createElement("button", {
                          onClick: (function (_event) {
                              return Curry._1(send, /* LoadMatches */Block.__(0, [gameId]));
                            })
                        }, "Refresh"), React.createElement("input", {
                          value: newMatchName,
                          onChange: (function ($$event) {
                              return Curry._1(send, /* SetNewMatchName */Block.__(1, [$$event.target.value]));
                            })
                        }), React.createElement("button", {
                          onClick: (function (_event) {
                              var name = newMatchName;
                              var gameId$1 = gameId;
                              return Repromise.wait((function (result) {
                                            if (Belt_Option.isSome(result)) {
                                              return Curry._1(send, /* LoadMatches */Block.__(0, [gameId$1]));
                                            } else {
                                              return 0;
                                            }
                                          }), GraphqlService$ReactTemplate.executeQuery(make$1(name, gameId$1, /* () */0)));
                            })
                        }, "Create"), matchList);
              }
              return React.createElement("div", undefined, tmp);
            }),
          /* initialState */(function (param) {
              return /* NotLoaded */0;
            }),
          /* retainedProps : record */[/* gameId */gameId],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                return /* Update */Block.__(0, [/* Error */2]);
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var gameId = action[0];
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* Loading */1,
                                (function (param) {
                                    var send = param[/* send */3];
                                    return Repromise.wait((function (result) {
                                                  if (result !== undefined) {
                                                    var matches = List.map((function (match_) {
                                                            return /* record */[
                                                                    /* id */match_.id,
                                                                    /* name */match_.name,
                                                                    /* scriptsCount */match_.scripts.length,
                                                                    /* winner */Belt_Option.mapWithDefault(match_.result, undefined, (function (result) {
                                                                            return result.winner;
                                                                          }))
                                                                  ];
                                                          }), $$Array.to_list(Caml_option.valFromOption(result).matches));
                                                    return Curry._1(send, /* SetMatches */Block.__(2, [matches]));
                                                  } else {
                                                    return Curry._1(send, /* SetError */0);
                                                  }
                                                }), getMatches(gameId));
                                  })
                              ]);
                  case 1 : 
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        return /* Update */Block.__(0, [/* Loaded */[
                                    action[0],
                                    state[1]
                                  ]]);
                      }
                  case 2 : 
                      return /* Update */Block.__(0, [/* Loaded */[
                                  "",
                                  action[0]
                                ]]);
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.GetMatchesQuery = GetMatchesQuery;
exports.CreateMatchMutation = CreateMatchMutation;
exports.getMatches = getMatches;
exports.make = make$2;
/* component Not a pure module */
